---
title: "World Toilet Day data, 2024"
author: "By Jennifer Peebles, The Atlanta Journal-Constitution"
date: "`r format(Sys.time(), '%b. %d, %Y')`"
output:
  pdf_document: default
  html_document: default
editor_options:
  chunk_output_type: console
---

```{r setup, eval = TRUE, echo = FALSE, include = FALSE}

# Reminder: Package to update R is install.packages("installr") and then load library(installr). The command is then updateR().

# Reminder of what packages are automatically loaded in the core tidyverse, as of Dec. 28, 2024: ggplot2, dplyr, tidyr, readr, purrr, tibble, stringr, and forcats. Also it loads also it loads DBI, haven, httr, readxl, googlesheets4, googledrive, rvest, jsonlite and xml2. More info at https://www.tidyverse.org/packages/

# Not included in the core tidyverse as of 12/28/24: lubridate, hms, blob, dbplyr, magrittr, glue, or any of the tidymodels packages (modelr/broom), and not reprex. 

# Load some packages
packages_core <- c("tidyverse", "janitor", "knitr", "magrittr", "lubridate", "kableExtra")
# If you're going to be working with census data ...
packages_census <- c("tidycensus", "tigris")
#packages_map <- c("sf", "rnaturalearth", "sp")
packages_specific <- c("digest", "grid", "swirl", "cdlTools")
# If you need to append packages_census or packages_map to the core list, use append ...

packages <- c(packages_core, packages_census, packages_specific)


lapply(packages, function(pkg) {
  if (!requireNamespace(pkg, quietly = TRUE)) install.packages(pkg)
  library(pkg, character.only = TRUE)
})

# Load the packages listed above
lapply(packages, library, character.only = TRUE)

# Customize some settings
options(digits = 3, # three digits behind a decimal
        scipen = 999, # I always include this now to stop R from giving me numbers in scientific notation. Not sure you will need this here, but I always include it. 
        stringsAsFactors = FALSE,
        width = 80
)

# Customize some knitr options. 
knitr::opts_chunk$set(
  echo = TRUE, 
  warning = FALSE, 
  message = FALSE, 
  results = "markup",
  fig.align = "center",
  fig.width = 6,
  fig.height = 4,
  inline = function(x) prettyNum(x, big.mark = ",") # This tells knitr to include commas in big numbers. 
)

# You should put in your Census API key here in the line below
#census_api_key("your_Census_API_key_goes_here_between_the_quote_marks")


```

## Intro

### Why data about toilets? 

We're posting this script in recognition of [World Toilet Day](https://www.un.org/en/observances/toilet-day) -- a day intended to draw greater awareness to the fact that many people in the world live without proper sanitary sewer service. 

Lack of such service brings an increased risk for the spread of numerous diseases. My own grandmother was orphaned at age 3 in the year 1930 when her [widowed young mother](https://www.ancestry.com/family-tree/person/tree/280288/person/-2100736346/facts) died of [typhoid fever](https://en.wikipedia.org/wiki/Typhoid_fever#:~:text = Typhoid%20fever%2C%20also%20known%20as,high%20fever%20over%20several%20days.), a disease that humans contract by drinking water that has been contaminated by human waste, such as when a well is dug too close to an outhouse or latrine. Typhoid also took the life of [my other grandmother's oldest sister](https://www.ancestry.com/family-tree/person/tree/280288/person/-2100736752/facts) at age 13 -- two young lives lost due to lack of running water and proper sanitation in rural Georgia.

Diseases like these, like typhoid and cholera, have largely been stamped out in the developed world toda due to the adoption of modern sewer and septic systems. But there are still places even in the U.S. where people go without such conveniences every day due to poverty. The United Nations estimates that 2 billion people use a drinking water source that is contaminated with fecal matter. 


### About the data

All data in this summary is from the 2022 5-year averages of the [American Community Survey](https://www.census.gov/programs-surveys/acs) done by the U.S. Census Bureau unless otherwise noted. 

ACS data is usually released about a year behind. ACS data for 2023 was released in calendar year 2022. Specifically, the 5-year ACS data is usually released in December.

The 5-year average data averages each metric over the previous five years to provide a less herky-jerky result than would be provided with annual data releases. Why do we use the 5-year average data? The Census Bureau only publishes 1-year data for the largest cities and counties in America. For everybody else, we have to use the 5-year data -- or nothing. 

ACS data is an estimate. The confidence interval is 90%. The Census Bureau publishes margins of error for each metric presented here. Always remember, the smaller the sample the estimate is taken from, the wider the margin of error. 

But just to be clear, despite my attempts at toilet humor here, we're not actually counting toilets per se. The Census Bureau questionnaire asks people if their home has "complete" plumbing facilities, which the Census has defined since 1990 as [hot and cold running water and a bath or shower and a working toilet](https://www.census.gov/data/tables/time-series/dec/coh-plumbing.html#:~:text = Complete%20plumbing%20facilities%20are%20defined,requirement%20was%20dropped%20in%201990). So the metric we're examining is the percentage of housing units that have, or lack, complete plumbing facilities. 

Much of the data in this summary specifically comes from ACS table B25047, [which you can read more about at here](https://censusreporter.org/tables/B25047/), "Plumbing Facilities for All Housing Units." 

### About this summary

The data was retrieved from the Census Bureau's online data repositories using the Census's Application Programming Interface (API) and the [tidycensus package](https://walker-data.com/tidycensus/) of the [R programming language](https://en.wikipedia.org/wiki/R_(programming_language)) written by Kyle Walker.

The data analysis was performed in the R programming language by Jennifer Peebles for The Atlanta Journal-Constitution using a number of R packages including the [tidyverse family of packages](https://www.tidyverse.org/) created by [Hadley Wickham](http://hadley.nz/) et al. I am also very grateful for packages including [janitor](https://github.com/sfirke/janitor) and [cdlTools](https://github.com/jlisic/cdlTools). Thank you to the brilliant people behind these packages who wrote all the code and keep it maintained. 

This summary was formatted using the [knitr package](https://yihui.org/knitr/) and [R Markdown](https://rmarkdown.rstudio.com/index.html). It has not been copy edited, so please forgive all typos and style errors. 

So, let's tear into the toilet data ... 

```{r more_getting_set_up, eval = TRUE, echo = FALSE, include = FALSE}

# Clean out all your variables, if you are so inclined. Otherwise, keep this commented-out
# rm(list = ls()) 

# If you want to change the working directory for this script, you can plug in the file path to your folder here. Note: Don't forget to use forward slashes ("/") instead of back slashes ("|") or else R won't be able to make sense of what you're trying to tell it, since back slashes are escape characters. 
# setwd("your_file_path_here")

base_wd <- "F:/your_file_path_here/dont_forget/the_slashes_must_be_forward_slashes"
setwd(base_wd)
if (getwd() != base_wd) stop("Working directory not set correctly!")

# Some variables you'll need to change. 

# Type in the name of your state (full name, no abbreviations, no punctation, capitalization is good. If you live in D.C., type in "District of Columbia." If you live in Puerto Rico, type in "Puerto Rico.")
my_state <- "Georgia"

# Another place to personalize this. We'll use this in the credit lines of the graphics. Change this to your name. 
my_name <- "Jennifer Peebles-AJC"

# our data year
data_year <-  2023

# our survey -- this is limited to the choices offered by tidycensus
our_survey <- "acs5"


```


```{r national_data, eval = TRUE, echo = FALSE, include = FALSE}

# set this to the geography level needed to pull your data; the options are limited to those offered by tidycensus. "us" is the setting for national-level statistics. This variable will be changed throughout this script. 
data_geo <-  "us"

# This will take your state name and put it into a string that we can use in regex to find entities in your state. 
my_state_regexp_string <- paste0(my_state, "$", collapse = "") %>% print()

# Some notes on variables from the ACS -- as of the 2023 ACS ... 
# B25047_001 is the estimate of all housing units ("Estimate!!Total:")
# B25047_002 is "Estimate!!Total:!!Complete plumbing facilities". I always love how the Census Bureau uses the exclamation points in the variable descriptions. It makes them look like they are JUST SO FREAKIN' EXCITED to tell you about this variable that they just can't stand it. 
# B25047_003 is "Estimate!!Total:!!Lacking complete plumbing facilities." 

# Let's grab the variables from the Census API using tidycensus. 
var22 <- load_variables(data_year, our_survey, cache = TRUE) %>% 
  filter(str_detect(concept, "Plumbing Facilities for All Housing Units"))

# Extract the table name and construct our variable list.
table_name <- substr(var22$name[1], 1, 7)
varlist_full <- paste0(table_name, str_pad(1:nrow(var22), width = 3, pad = "0"))

# Ask tidycensus to obtain our data for us. 
toilet_data <- get_acs(
  geography = data_geo,
  year = data_year,
  survey = our_survey,
  variables = varlist_full
) %>% janitor::clean_names()

# Marry this new table to our variable table. 
toilet_data_labeled <- toilet_data %>% 
  left_join(var22, by = c("variable" = "name")) %>% 
  select(-concept, -variable)

# Reshape and clean our column names
us_toilet_totals <- toilet_data_labeled %>% 
  pivot_wider(
    names_from = label,
    values_from = c(estimate, moe),
    names_sep = "_"
  ) %>% 
  janitor::clean_names()

# More fixes to column names
us_toilet_totals <- us_toilet_totals %>% 
  rename_with(~ gsub("estimate_estimate", "estimate", .x)) %>% 
  rename_with(~ gsub("moe_estimate", "moe", .x))

# Calculate percentages with mutate-across. 
us_toilet_totals <- us_toilet_totals %>% 
  mutate(across(
    starts_with("estimate"), 
    ~ .x / estimate_total * 100,
    .names = "pct_{.col}"
  ))


# View our processed data
kable(head(us_toilet_totals), format = "markdown")

# Let's make a chart
ggplot(us_toilet_totals, aes(x = reorder(pct_estimate_complete_plumbing_facilities, -estimate_total), 
                            y = pct_estimate_complete_plumbing_facilities)) +
  geom_col(fill = "steelblue") +
  coord_flip() +
  labs(
    title = "Percentage of housing units with complete plumbing facilities",
    x = "Percentage",
    y = "Housing units"
  )

```

## National data

The Census Bureau estimates that there are `r us_toilet_totals$estimate_total` housing units nationwide -- that's all 50 states, the District of Columbia and Puerto Rico. (The margin of error there is plus or minus `r us_toilet_totals$moe_total` units.)

Of those, the Census estimates that `r us_toilet_pcts1$pct_complete_plumbing_facilities`% of all American housing units have complete plumbing facilities.

The Census estimates the remaining `r us_toilet_pcts1$pct_lacking_complete_plumbing_facilities`% lack complete plumbing facilities. 


```{r state_data, eval = TRUE, echo = FALSE, include = FALSE}

# Now, let's pull down the state-level data for our variables. To do that, we change data_geo to "state."

data_geo <- "state"

# Ping the Census API again using tidycensus. This time, we're grabbing state-level data. . 
toilet_data_state <- get_acs(
  geography = data_geo,
  year = data_year,
  survey = our_survey,
  variables = varlist_full
) %>% janitor::clean_names()

# Marry this new table to our variable table. We'll call "select" specifically from dplyr or else we'll get an error, or at least, I do ...
toilet_data_state_labeled <- toilet_data_state %>%
  left_join(var22, by = c("variable" = "name")) %>% 
  dplyr::select(-concept, -variable)

# Reshape and clean our column names
state_toilet_totals <- toilet_data_state_labeled %>% 
  pivot_wider(
    names_from = label,
    values_from = c(estimate, moe),
    names_sep = "_"
  ) %>% 
  janitor::clean_names()

# More fixes to column names
state_toilet_totals <- state_toilet_totals %>% 
  rename_with(~ gsub("estimate_estimate", "estimate", .x)) %>% 
  rename_with(~ gsub("moe_estimate", "moe", .x))

# Calculate percentages with mutate-across. 
state_toilet_totals <- state_toilet_totals %>% 
  mutate(across(
    starts_with("estimate"), 
    ~ .x / estimate_total * 100,
    .names = "pct_{.col}"
  ) %>%  mutate(moe_pct =
                  ((moe_total/estimate_total)*100))
  )

state_toilet_totals <- state_toilet_totals %>% 
  rename_with(~ gsub("estimate_total_", "estimate_", .x)) %>% 
  rename_with(~ gsub("moe_total_", "moe_", .x)) %>% 
  rename_with(~ gsub("pct_estimate_total_", "pct_", .x)) %>% 
  rename_with(~ gsub("estimate", "est", .x))

# View our processed data
kable(head(state_toilet_totals), format = "markdown")

graphic_caption <- paste0("Graphic by ", my_name, collapse = "") %>% print()

# Note that this color scheme of skyblue and orange is stolen from The R Graph Gallery. It's just so darn pretty. Be sure to check them out at https://www.r-graph-gallery.com/4-barplot-with-error-bar.html

# Actually make our graph. 
states_barplot <- ggplot(state_toilet_totals) +
    geom_bar(aes(x = reorder(name, pct_est_complete_plumbing_facilities), y = pct_est_complete_plumbing_facilities), stat = "identity", fill = "skyblue", alpha = 0.7) +
    geom_errorbar( aes(x = reorder(name,pct_est_complete_plumbing_facilities), ymin = pct_est_complete_plumbing_facilities-moe_pct, ymax = pct_est_complete_plumbing_facilities+moe_pct), width = 0.4, colour = "orange", alpha = 0.9, linewidth = 1.3) +
  coord_flip() +
  labs(
    title  =  "Percentage of housing units with complete\nplumbing facilities by state",
    subtitle  =  "From the 2022 ACS 5-year. Margins of error shown in orange. D.C. and\nPuerto Rico are included as states.",
    caption  =  graphic_caption,
    tag  =  "Figure 1",
    x  =  "",
    y  =  "Percentage of housing units with complete plumbing facilities",
    colour  =  "Gears"
  ) +
  theme(axis.text.x = element_text(color  =  "black", size = 8, angle = 30, vjust = .8, hjust = 0.8)) 

# Show our graph. 
states_barplot

# TO-DO
# JP would like to eventually add a boxplot of state-level data here. 

# TO-DO
# It would also be cool to do choropleth map of the 50 states here. 


```

## State data

The state with the best track record in this metric -- the state with the highest percentage of housing units with complete plumbing facilities -- is `r state_ranks_toilet %>%  filter(rank_nationally_pct_complete =  = 1) %>% pull(name)`. The ACS estimates that `r state_ranks_toilet %>%  filter(rank_nationally_pct_complete =  = 1) %>% pull(pct_complete_plumbing_facilities)`% of California homes have all the necessary plumbing features. 

Sitting in the last slot on the list -- position No. 52, since the table includes the District of Columbia and Puerto Rico -- is `r state_ranks_toilet %>%  filter(rank_nationally_pct_complete =  = 52) %>% pull(name)`, for which the Census estimates `r state_ranks_toilet %>%  filter(rank_nationally_pct_complete =  = 52) %>% pull(pct_complete_plumbing_facilities)`% of housing units have fully functional plumbing. 

Let's take a look at all 50 states, in alphabetical order. Note that there should be a graphic below this table that visualizes the percentage complete.

`r knitr::kable(state_ranks_toilet[order(state_ranks_toilet$name, decreasing = FALSE),c(2,3,4,7,5,9)],  col.names = c("State", "Total housing units", "% w/complete plumbing facilities", "Margin of error for % complete (in pctg pts)", "% lacking complete plumbing facilities", "Rank in % complete facilities"), digits = 1, caption = "Housing units with complete facilities by state", format.args  =  list(big.mark  =  ",", scientific  =  FALSE))`


```{r state_data_plot, eval = TRUE, echo = FALSE, include = TRUE, fig.width = 7,fig.height = 10}

# This will tell knitr to include the barplot in the knitted output. 
states_barplot


```


```{r county_data, eval = TRUE, echo = FALSE, include = FALSE}

# Now, let's pull down data for the county level. 

# Let's go back and ping the Census API with tidycensus again. 
county_toilet <- get_acs(geography  =  "county", year  =  2022, survey  =  "acs5", variables  =  varlist_full, geometry  =  FALSE) %>%  janitor::clean_names() %>%  print()

county_toilet_totals <- merge(x  =  county_toilet, y = var22, by.x  =  "variable", by.y  =  "name", all  =  FALSE)%>% select(-concept, -variable) %>%  pivot_wider(names_from = label, values_from  =  c(estimate, moe), names_sep = "_") %>%  janitor::clean_names() %>%  print()

names(county_toilet_totals) <- gsub("estimate_estimate", "estimate", names(county_toilet_totals)) %>%  print()
                                
names(county_toilet_totals) <- gsub("moe_estimate", "moe", names(county_toilet_totals)) %>%  print()

county_toilet_totals$total_moe_pct <- ((county_toilet_totals$moe_total/county_toilet_totals$estimate_total)*100) %>%  print()

county_toilet_totals$complete_moe_pct <- ((county_toilet_totals$moe_total_complete_plumbing_facilities/county_toilet_totals$estimate_total_complete_plumbing_facilities)*100) %>%  print()

county_toilet_totals$lacking_moe_pct <- ((county_toilet_totals$moe_total_lacking_complete_plumbing_facilities/county_toilet_totals$estimate_total_lacking_complete_plumbing_facilities)*100) %>%  print()

county_toilet_pcts1 <- county_toilet_totals %>% mutate(across(4:5, ~ (.x/county_toilet_totals$estimate_total)*100)) %>%  print()

names(county_toilet_pcts1)[c(4:5)] <- gsub("estimate_total_", "pct_", names(county_toilet_pcts1)[c(4:5)]) 
  
county_toilet_pcts2 <- county_toilet_pcts1 %>%   select(-moe_total, -moe_total_complete_plumbing_facilities, -moe_total_lacking_complete_plumbing_facilities) %>%  print()

counties_percentile_most_complete <- mutate(county_toilet_pcts2, percentile_rank  =  ntile(county_toilet_pcts2$pct_complete_plumbing_facilities,100), state_name  =  (substr(geoid, 1,2) %>% fips(to  =  "Name"))) %>%  print()

# In case you need a table of how many counties are in each state, total. 
counties_percentile_most_complete %>% group_by(state_name) %>% summarize(total_counties_in_data_set = n()) %>% View()

# Create table of states with at least 1 county in the 100th percentile. 
states_w_at_least_1_county_in_100th <- counties_percentile_most_complete %>%  filter(percentile_rank =  = 100) %>% group_by(state_name) %>% summarize(total_counties_in_100th_percentile = n()) %>% arrange(desc(total_counties_in_100th_percentile)) %>% print()

counties_percentile_most_complete %>%  filter(pct_complete_plumbing_facilities =  = 100)

# Create table of states with at least 1 county in the 100th percentile. 
states_w_at_least_1_county_in_1st <- counties_percentile_most_complete %>%  filter(percentile_rank =  = 1) %>% group_by(state_name) %>% summarize(total_counties_in_1st_percentile = n()) %>% arrange(desc(total_counties_in_1st_percentile)) %>% print()

glimpse(counties_percentile_most_complete)

counties_percentile_most_complete$pct_lacking_complete_plumbing_facilities <- 100-counties_percentile_most_complete$pct_complete_plumbing_facilities
# 
# Create a barplot of the 100th percentile counties. 
counties_100th_percentile_barplot <- ggplot(counties_percentile_most_complete %>%  filter(percentile_rank =  = 100)) +
    geom_bar( aes(x = reorder(name, pct_complete_plumbing_facilities), y = pct_complete_plumbing_facilities), stat = "identity", fill = "skyblue", alpha = 0.7) +
    geom_errorbar( aes(x = reorder(name,pct_complete_plumbing_facilities), ymin = pct_complete_plumbing_facilities-complete_moe_pct, ymax = pct_complete_plumbing_facilities+complete_moe_pct), width = 0.4, colour = "orange", alpha = 0.9, size = 1.3) +
  coord_flip() +
  labs(
    title  =  "Most toilet-heavy counties nationally",
    subtitle  =  "For the counties in the 100th percentile nationally -- the 1%\nwith the best records in the Census metric on housing units\nwith complete plumbing facilities. From the 2022 ACS\n5-year. Margins of error shown in orange. D.C. and\nPuerto Rico are included as states in the full data set.",
    caption  =  graphic_caption,
    tag  =  "Figure 2",
    x  =  "",
    y  =  "Percentage of housing units with complete plumbing facilities",
    colour  =  "Gears"
  ) +
  theme(axis.text.x = element_text(color  =  "black", size = 8, angle = 30, vjust = .8, hjust = 0.8)) 

# Show the barplot
counties_100th_percentile_barplot

# Create a barplot of the 1st percentile counties. 
counties_1st_percentile_barplot <- ggplot(counties_percentile_most_complete %>%  filter(percentile_rank =  = 1)) +
    geom_bar( aes(x = reorder(name, pct_complete_plumbing_facilities), y = pct_complete_plumbing_facilities), stat = "identity", fill = "skyblue", alpha = 0.7) +
    geom_errorbar( aes(x = reorder(name,pct_complete_plumbing_facilities), ymin = pct_complete_plumbing_facilities-complete_moe_pct, ymax = pct_complete_plumbing_facilities+complete_moe_pct), width = 0.4, colour = "orange", alpha = 0.9, size = 1.3) +
  coord_flip() +
  labs(
    title  =  "Where toilets are least available nationally",
    subtitle  =  "For the counties in the 1st percentile nationally -- the 1%\nwith the worst records in the Census metric on\nhousing units with complete plumbing\nfacilities. From the 2022 ACS 5-year. Margins\nof error shown in orange.\nD.C. and Puerto Rico are included as states in the\nfull data set.",
    caption  =  graphic_caption,
    tag  =  "Figure 3",
    x  =  "",
    y  =  "Percentage of housing units with\ncomplete plumbing facilities",
    colour  =  "Gears"
  ) +
  theme(axis.text.x = element_text(color  =  "black", size = 8, angle = 30, vjust = .8, hjust = 0.8)) 


# TO-DO
# JP would eventually like to take the kable for the top 1% and order it by % with complete plumbing facilities. Or at least order by something. Right now it's just random. And then do the same for the kable for the bottom 1%. 

```
***

## County data: All counties across America

So, what county worries least about toilets and running water? 

The Census Bureau estimates that `r nrow(counties_percentile_most_complete %>%  filter(pct_complete_plumbing_facilities =  = 100))` counties nationwide have 100% complete plumbing facilities (keep in mind, this is just an estimate, for which each county also has a margin of error. So, Uncle Sam could always be off a bit here.)

There are `r nrow(county_toilet_totals)` counties in the full national Census data set, so to try to make comparisons across states, we'll divide the county data into percentiles (in other words, 100 buckets). The higher the number of the bucket a county lands in, the closer it is to the highest end of the scale. So, the `r nrow(counties_percentile_most_complete %>%  filter(percentile_rank =  = 100))` counties in the 100th percentile have the best overall plumbing situation, and the counties in the 1st percentile have the worst. 

#### The top 1 percent: Toilets ... toilets everywhere

Here's a quick summary of 100th percentile counties by state so you can look and quickly see if your state has any counties up there in the toilet stratosphere. 

`r knitr::kable(states_w_at_least_1_county_in_100th <- counties_percentile_most_complete %>%  filter(percentile_rank =  = 100) %>% group_by(state_name) %>% summarize(total_counties_in_100th_percentile = n()) %>% arrange(desc(total_counties_in_100th_percentile)), col.names = c("State", "Number of counties in 100th percentile"), digits = 1, caption = "States with at least 1 county in the 100th percentile")`

Next, let's look at the actual counties in the 100th percentile. (Note: There is a bar chart showing the data from this table below the table.)

`r knitr::kable((counties_percentile_most_complete %>%  filter(percentile_rank =  = 100) %>% select(name, estimate_total, pct_complete_plumbing_facilities, pct_lacking_complete_plumbing_facilities)),  col.names = c("County", "Total housing units", "% w/complete plumbing facilities", "% lacking complete plumbing facilities"), digits = 1, caption = "Counties in the 100th percentile", format.args  =  list(big.mark  =  ",", scientific  =  FALSE))`

```{r counties_100th_percentile_barplot, eval = TRUE, echo = FALSE, include = TRUE, fig.height  =  9}

# Tell knitr to show the 100th percentile barplot in the knitted output. 
counties_100th_percentile_barplot

```

#### The bottom 1%

Toilet-less on the tundra? Alaska has the greatest number of counties in this lowest-toileted group. 

`r knitr::kable(states_w_at_least_1_county_in_1st <- counties_percentile_most_complete %>%  filter(percentile_rank =  = 1) %>% group_by(state_name) %>% summarize(total_counties_in_1st_percentile = n()) %>% arrange(desc(total_counties_in_1st_percentile)), col.names = c("State", "Number of counties in 1st percentile"), digits = 1, caption = "States with at least 1 county in the 1st percentile")`

The next table actually names the counties in the 1st percentile. 

`r knitr::kable((counties_percentile_most_complete %>%  filter(percentile_rank =  = 1) %>% select(name, estimate_total, pct_complete_plumbing_facilities, pct_lacking_complete_plumbing_facilities)),  col.names = c("County", "Total housing units", "% w/complete plumbing facilities", "% lacking complete plumbing facilities"), digits = 1, caption = "Counties with the lowest percentage of complete plumbing facilities in its housing units", format.args  =  list(big.mark  =  ",", scientific  =  FALSE))`

```{r counties_1st_percentile_barplot, eval = TRUE, echo = FALSE, include = TRUE, fig.height  =  9}

# Tell knitr to show the first-percentile barplot in the knitted output. 
counties_1st_percentile_barplot

```

***

```{r places_data, eval = TRUE, echo = FALSE, include = FALSE}

# Now to look at data by place. Note that this data is for the Census Bureau's definition of a "place," and that includes not just cities and towns and villages but also their equivalents across the nation as well as CDP's -- Census Designated Places, which are generally not incorporated (but some of them were incorporated at one time). If you want to take out 

# We go back to the Census API with tidycensus again ... 
place_toilet <- get_acs(geography  =  "place", year  =  2022, survey  =  "acs5", variables  =  varlist_full, geometry  =  FALSE) %>%  janitor::clean_names() %>%  print()

# Un-commenting-out this next line will remove the CDP's from the dataset.
#place_toilet <- place_toilet %>%  filter(!str_detect(name, "CDP"))

# Un-commenting-out this next line will remove all places from the data set that are in Puerto Rico, if you just want to look at the 50 states and D.C.
#place_toilet <- place_toilet %>%  filter(!str_detect(name, "Puerto Rico"))

place_toilet_totals <- merge(x  =  place_toilet, y = var22, by.x  =  "variable", by.y  =  "name", all  =  FALSE) %>% select(-concept, -variable) %>%  pivot_wider(names_from = label, values_from  =  c(estimate, moe), names_sep = "_") %>%  janitor::clean_names() %>%  print()

names(place_toilet_totals) <- gsub("estimate_estimate", "estimate", names(place_toilet_totals)) %>%  print()
                                
names(place_toilet_totals) <- gsub("moe_estimate", "moe", names(place_toilet_totals)) %>%  print()

place_toilet_totals$total_moe_pct <- ((place_toilet_totals$moe_total/place_toilet_totals$estimate_total)*100) %>%  print()

place_toilet_totals$complete_moe_pct <- ((place_toilet_totals$moe_total_complete_plumbing_facilities/place_toilet_totals$estimate_total_complete_plumbing_facilities)*100) %>%  print()

place_toilet_totals$lacking_moe_pct <- ((place_toilet_totals$moe_total_lacking_complete_plumbing_facilities/place_toilet_totals$estimate_total_lacking_complete_plumbing_facilities)*100) %>%  print()

place_toilet_pcts1 <- place_toilet_totals %>% mutate(across(4:5, ~ (.x/place_toilet_totals$estimate_total)*100)) %>%  print()

names(place_toilet_pcts1)[c(4:5)] <- gsub("estimate_total_", "pct_", names(place_toilet_pcts1)[c(4:5)]) 
  
place_toilet_pcts2 <- place_toilet_pcts1 %>%   select(-moe_total, -moe_total_complete_plumbing_facilities, -moe_total_lacking_complete_plumbing_facilities) %>%  print()

places_percentile_most_complete <- mutate(place_toilet_pcts2, percentile_rank  =  ntile(place_toilet_pcts2$pct_complete_plumbing_facilities,100), state_name  =  (substr(geoid, 1,2) %>% fips(to  =  "Name"))) %>%  print()

places_100th_percentile <- places_percentile_most_complete %>%  filter(percentile_rank =  = 100)

# Write out to a CSV a file of places in the 100th percentile. 
write.csv(places_100th_percentile, "complete_plumbing_facilities_2022_ACS_5year_places_100th_percentile.csv")

# Create table of states with at least 1 place in the 100th percentile. 
states_w_at_least_1_place_in_100th <- places_percentile_most_complete %>%  filter(percentile_rank =  = 100) %>% group_by(state_name) %>% summarize(places_in_100th_percentile = n()) %>% arrange(desc(places_in_100th_percentile)) %>% print()

places_1st_percentile <- places_percentile_most_complete %>%  filter(percentile_rank =  = 1)

# Write out to a CSV a file of places in the first percentile. 
write.csv(places_1st_percentile, "complete_plumbing_facilities_2022_ACS_5year_places_1st_percentile.csv")

states_w_at_least_1_place_in_1st <- places_percentile_most_complete %>%  filter(percentile_rank =  = 1) %>% group_by(state_name) %>% summarize(places_in_1st_percentile = n()) %>% arrange(desc(places_in_1st_percentile)) %>% print()

```

### Place-level data

First of all, what is a "place" in Census data? As of this writing, a place can be a city, a town, a village, a hamlet, etc. Many places in Census data are incorporated. But some are not. There are also places in the data called "CDPs" -- [Census-designated places](https://en.wikipedia.org/wiki/Census-designated_place) -- that are basically like the the Census Bureau saying, "we're going to consider this, statistics-wise, as if it were incorporated, even though it isn't." 

There are `r nrow(place_toilet_pcts2)` total places in the Census data nationwide. Of that group, `r nrow(places_1st_percentile)` places are reported in the ACS 5-year data for 2022 as its housing units having 100% complete plumbing facilities. There are too many to put in a graphic or a list easily. 

To remedy that, the script that creates this summary should create two CSV files in your current working directory, one for the places in the 100th percentile, the other for the places in the first percentile. 

But since most of you using this script will be journalists who are trying to quickly localize a story or find a local angle on this data, here's a quick table that names off the `r nrow(places_percentile_most_complete %>%  filter(percentile_rank =  = 100) %>% group_by(state_name) %>% summarize(places_in_100th_percentile = n()))` states that have at least one place in the rarified air of the 100th percentile. 

`r knitr::kable(states_w_at_least_1_place_in_100th,  col.names = c("State", "Places in 100th percentile"), digits = 1, caption = "States with at least 1 place in 100th percentile", format.args  =  list(big.mark  =  ",", scientific  =  FALSE))`

Next, let's look at the `r nrow(places_percentile_most_complete %>%  filter(percentile_rank =  = 1) %>% group_by(state_name) %>% summarize(places_in_1st_percentile = n()))` states that have at least one place in the first percentile. 

`r knitr::kable(states_w_at_least_1_place_in_1st,  col.names = c("State", "Places in 1st percentile"), digits = 1, caption = "States with at least 1 place in 1st percentile", format.args  =  list(big.mark  =  ",", scientific  =  FALSE))`

```{r last_section, eval = TRUE, echo = FALSE, include = FALSE}
#30

```
